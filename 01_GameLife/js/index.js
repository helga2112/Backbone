// Generated by CoffeeScript 2.3.2
(function() {

  /*
      Add buttons Start and Reset
  */
  var ButtonsCollection, GameButtonModel, GameButtonView, GameButtonsView, GridCollection, GridItemModel, GridItemView, GridView, buttonModel, buttons, buttonsCollection, collection, colums, gameButtonsView, gridCollection, gridItemModel, gridView, i, j, maxCells, ref, rows;

  colums = 10;

  rows = 10;

  // одна ячейка на сетке
  GridItemModel = Backbone.Model.extend({
    defaults: {
      isFree: true
    }
  });

  
  // коллекция элементов для создания сетки
  GridCollection = Backbone.Collection.extend({
    model: GridItemModel
  });

  gridItemModel = new GridItemModel();

  // вьюшка сетки
  GridView = Backbone.View.extend({
    tagName: 'div',
    className: 'grid-container ',
    initialize: function() {
      return this.render;
    },
    render: function() {
      var i, item, j, ref;
      for (i = j = 0, ref = maxCells; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
        item = new GridItemView({
          model: gridItemModel
        });
        this.$el.append(item.render().el);
      }
      return this;
    }
  });

  // вьюшка одной ячейки
  GridItemView = Backbone.View.extend({
    tagName: 'div',
    className: 'cell',
    template: _.template('%= text %>'),
    // react on change event
    initialize: function() {
      this.listenTo(this.model, "change", this.render);
      return this.render();
    },
    render: function() {
      var div;
      div = document.createElement('div');
      this.$el.html(this.model.get('text'));
      return this;
    },
    // react on user click
    events: {
      "click": "open"
    },
    open: function() {
      console.log(this.el);
      return this.el.style.backgroundColor = 'red';
    }
  });

  GameButtonModel = Backbone.Model.extend({
    defaults: {
      caption: 'NEW Button',
      className: 'custom-button'
    }
  });

  GameButtonView = Backbone.View.extend({
    tagName: 'button',
    className: 'test1',
    render: function() {
      var div;
      div = document.createElement('div');
      this.$el.html(this.model.get('caption'));
      return this;
    },
    events: {
      'click': 'startGameHandler'
    },
    startGameHandler: function(ev) {
      var ttt;
      ttt = $(ev.currentTarget);
      return console.log(ttt);
    }
  });

  ButtonsCollection = Backbone.Collection.extend({
    model: GameButtonModel
  });

  buttonModel = new GameButtonModel();

  GameButtonsView = Backbone.View.extend({
    tagName: 'li',
    render: function() {
      this.collection.each(this.addToView, this);
      return this;
    },
    addToView: function(buttonModel) {
      var viewButton;
      viewButton = new GameButtonView({
        model: buttonModel
      });
      return this.$el.append(viewButton.render().el);
    }
  });

  // инициализация грида
  collection = [];

  maxCells = colums * rows - 1;

  for (i = j = 0, ref = maxCells; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
    collection.push({});
  }

  gridCollection = new GridCollection(collection);

  gridView = new GridView({
    collection: gridCollection
  });

  // инициализация кнокок Start and Reload
  buttons = [
    {
      caption: 'Start',
      className: 'start'
    },
    {
      caption: 'Reload',
      className: 'reload'
    }
  ];

  buttonsCollection = new ButtonsCollection(buttons);

  gameButtonsView = new GameButtonsView({
    collection: buttonsCollection
  });

  console.log(buttonsCollection);

  $(document.body).append(gameButtonsView.render().el);

  $(document.body).append(gridView.render().el);

}).call(this);
